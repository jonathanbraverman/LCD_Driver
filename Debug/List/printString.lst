###############################################################################
#                                                                             #
#     IAR Assembler V5.50.1.50465/W32  for MSP430 25/Apr/2013  21:11:02       #
#     Copyright 1996-2012 IAR Systems AB.                                     #
#                                                                             #
#           Target option =  MSP430                                           #
#           Source file   =  C:\Users\157_13\Pictures\Module Construction\multiple module\printString.s43#
#           List file     =  C:\Users\157_13\Pictures\Module Construction\multiple module\Debug\List\printString.lst#
#           Object file   =  C:\Users\157_13\Pictures\Module Construction\multiple module\Debug\Obj\printString.r43#
#           Command line  =  C:\Users\157_13\Pictures\Module Construction\multiple module\printString.s43 #
#                            -OC:\Users\157_13\Pictures\Module Construction\multiple module\Debug\Obj\ #
#                            -s+ -M<> -w+                                     #
#                            -LC:\Users\157_13\Pictures\Module Construction\multiple module\Debug\List\ #
#                            -cE -t8 -r -D__MSP430G2553__                     #
#                            -IC:\Program Files (x86)\IAR Systems\Embedded Workbench 6.4 Kickstart\430\INC\ #
#                                                                             #
###############################################################################

      1    000200                      NAME    printString                   ;
                                module name
      2    000000                      EXTERN  CREATEMESSAGE                 ;
  declare externally defined CREATEMESSAGE
      3    000000                      EXTERN  b_invalid_msg                 ;
                                declare externally defined bad message
                                flag
      4    000200                      
      5    000000                      PUBLIC  PRINTSTRING                   ;
  make the main label visible outside this file
      6    000200                
      7    000200                      ORG    0x200      
      8    000200                                                     
                                
      9    000200                                                     
                                
     10    000000                      RSEG    CODE                    ; place
  program code in 'CODE' segment
     11    000000              
     12    000000              
     13    000000              
     14    000000              ;-----------------------------------------------
                               --------------------------------PURPOSE: sends
                                out a string to get printed
     15    000000              PRINTSTRING:;                                   
                                                               IN: pointer to
                                string in R9
     16    000000              ;-----------------------------------------------
                               --------------------------------OUT: streams a
                                char at a time to createMessage
     17    000000                      ; R7 is the dataType -- setting it to 1
                                indicates data (not control)
     18    000000                      ; R8 is the data contents for createmess
                               age
     19    000000                      ; R9 is the string pointer
     20    000000                      
     21    000000 3990FF01             CMP.W   #0x01FF, R9              ;
                                                                         verify
                                                                         that
                                                                         the
                                                                         string
                                                                         pointe
                                                                        r isn't
                                                                         out of
                                                                         bounds
                                                                         of
                                                                         RAM
     22    000004 0D28                 JLO     dataNotInRam             ; if
                                                                         its
                                                                         out of
                                                                         bounds
                                                                         low,
                                                                         jump
     23    000006 3990F109             CMP.W   #0x09F1, R9              ;
                                                                         verify
                                                                         that
                                                                         the
                                                                         string
                                                                         pointe
                                                                        r isn't
                                                                         out of
                                                                         bounds
                                                                         of
                                                                         RAM
     24    00000A 0A2C                 JHS     dataNotInRam             ; if
                                                                         its
                                                                         out of
                                                                         bounds
                                                                         high,
                                                                         jump
     25    00000C                      
     26    00000C 0712                 PUSH    R7                       ;
                                                                         preser
                                                                        ve the
                                                                         regist
                                                                        ers
                                                                         
     27    00000E 0812                 PUSH    R8                       ;
                                                                         
     28    000010 1743                 MOV.W   #1, R7                   ; set
                                                                         the
                                                                         data
                                                                         type
                                                                         to
                                                                         data
     29    000012                      
     30    000012              
     31    000012                     sendAnother:
     32    000012 C9930000             CMP.B   #0x00, 0(R9)             ; see
                                                                         if the
                                                                         pointe
                                                                        r is
                                                                         pointi
                                                                        ng to
                                                                         the
                                                                         null
                                                                         charac
                                                                        ter
     33    000016 0424                 JZ      endPrintString           ; if it
                                                                         points
                                                                         to
                                                                         null,
                                                                         end
                                                                         the
                                                                         subrou
                                                                        tine
     34    000018 7849                 MOV.B   @R9+, R8                 ; move
                                                    the next character to the
                                                    parameter for createMessage
     35    00001A B012....             CALL    #CREATEMESSAGE           ; call
                                                                         create
                                                                         messag
                                                                        e with
                                                                         the
                                                                         parame
                                                                        ter
                                                                         set
     36    00001E                     ; CMP.B   #1, &b_invalid_msg      ; see
                                if createMessage returned bad 
     37    00001E                     ; badMessage:
     38    00001E                     ; JZ      badMessage              ;
                                infinite loop for debugging
     39    00001E F93F                 JMP     sendAnother              ; do
                                                                         until
                                                                         pointe
                                                                        r
                                                                         points
                                                                         to
                                                                         null
     40    000020                     
     41    000020                     dataNotInRam:                     ; to be
                                called when the string pointer is invalid
     42    000020                     
     43    000020                     endPrintString:
     44    000020 3841                POP      R8                       ;
                                                                         restor
                                                                        e the
                                                                         regist
                                                                        ers
     45    000022 3741                POP      R7
     46    000024                     
     47    000024 3041               RET
     48    000026                    
     49    000026              
     50    000026              
     51    000026              END
##############################
#          CRC:63D8          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 38          #
##############################



