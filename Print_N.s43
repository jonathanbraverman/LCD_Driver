        NAME    Print_N                  ; module name
 
        PUBLIC  Print_Numbers                   ; make the main label visible outside this file
  
_byte	   EQU 1

ORG    0x0286
        
b_hundreds DS _byte
b_tens	   DS _byte
b_ones	   DS _byte
b_zero_t   DS _byte
b_zero_o   DS _byte
      
                                        
                                        
                                        
        RSEG    CODE                    ; place program code in 'CODE' segment
;--------------------------------------------------------------------------------------
Print_Numbers
;--------------------------------------------------------------------------------------

;--------------------------------------------------------------------------------------
test_hundreds
;--------------------------------------------------------------------------------------

	cmp.b		#0xC8, R6		; Test R6 against 200 to see if a 2 goes into the hundreds.
	jhs		two_hundred		; Two goes into the hundreds space.
	cmp.b		#0x64, R6		; Test R6 against 100 to see if a 1 goes into the hundreds.
	jhs		one_hundred		; One goes into the hundreds space.
	mov.b		#0x20, &b_hundreds	; Move a space into the hundreds place.

;--------------------------------------------------------------------------------------
test_tens
;--------------------------------------------------------------------------------------

	cmp.b		#0x5A, R6		; Test R6 against 90 to see if a 9 goes into the tens.
	jhs		ninety			; Nine goes into the tens space.
	cmp.b		#0x50, R6 		; Test R6 against 80 to see if an 8 goes into the tens.
	jhs		eighty			; Eight goes into the tens space.
	cmp.b		#0x46, R6		; Test R6 against 70 to see if a 7 goes into the tens.
	jhs		seventy			; Seven goes into the tens space.
	cmp.b		#0x3C, R6		; Test R6 against 60 to see if a 6 goes into the tens.
	jhs		sixty			; Six goes into the tens space.
	cmp.b		#0x32, R6		; Test R6 against 50 to see if a 5 goes into the tens.
	jhs		fifty			; Five goes into the tens space.
	cmp.b		#0x28, R6		; Test R6 against 40 to see if a 4 goes into the tens.
	jhs		forty			; Four goes into the tens space.
	cmp.b		#0x1E, R6		; Test R6 against 30 to see if a 3 goes into the tens.
	jhs		thirty			; Three goes into the tens space.
	cmp.b		#0x14, R6		; Test R6 against 20 to see if a 2 goes into the tens.
	jhs		twenty			; Two goes into the tens space.
	cmp.b		#0x0A, R6		; Test R6 against 10 to see if a 1 goes into the tens.
	jhs		ten			; One goes into the tens space.
	jmp		zero_tens		; Put a zero into that area.

;--------------------------------------------------------------------------------------
test_ones
;--------------------------------------------------------------------------------------

	cmp.b		#0x09, R6		; Test R6 against 9 to see if a 9 goes into the tens.
	jhs		nine			; Nine goes into the tens space.
	cmp.b		#0x08, R6 		; Test R6 against 8 to see if an 8 goes into the tens.
	jhs		eight			; Eight goes into the tens space.
	cmp.b		#0x07, R6		; Test R6 against 7 to see if a 7 goes into the tens.
	jhs		seven			; Seven goes into the tens space.
	cmp.b		#0x06, R6		; Test R6 against 6 to see if a 6 goes into the tens.
	jhs		six			; Six goes into the tens space.
	cmp.b		#0x05, R6		; Test R6 against 5 to see if a 5 goes into the tens.
	jhs		five			; Five goes into the tens space.
	cmp.b		#0x04, R6		; Test R6 against 4 to see if a 4 goes into the tens.
	jhs		four			; Four goes into the tens space.
	cmp.b		#0x03, R6		; Test R6 against 3 to see if a 3 goes into the tens.
	jhs		three			; Three goes into the tens space.
	cmp.b		#0x02, R6		; Test R6 against 2 to see if a 2 goes into the tens.
	jhs		two			; Two goes into the tens space.
	cmp.b		#0x01, R6		; Test R6 against 1 to see if a 1 goes into the tens.
	jhs		one			; One goes into the tens space.
        jmp             zero_ones

;--------------------------------------------------------------------------------------
;Subroutines moving the ASCII value of their respective 
;numbers to the hundreds, tens, and ones places.
;--------------------------------------------------------------------------------------

two_hundred

	mov.b		#0x32, &b_hundreds	; Move a 2 into the hundreds place.
	sub.b		#0xC8, R6		; Subtract 200 from R6.
	mov.b		#0x01, &b_zero_t	; Dirty bit for Tens place to determine whether a blank or zero is necessary.
	jmp		test_tens		; Find Tens value.

one_hundred

	mov.b		#0x31, &b_hundreds	; Move a 1 into the hundreds place.
	sub.b		#0x64, R6		; Subtract 100 from R6.
	mov.b		#0x01, &b_zero_t        ; Dirty bit for Tens place to determine whether a blank or zero is necessary.
	jmp		test_tens		; Find Tens value.

;--------------------------------------------------------------------------------------
;Tens Place
;--------------------------------------------------------------------------------------

ninety

	mov.b		#0x39, &b_tens		; Move a 9 into the tens place.
	sub.b		#0x5A, R6               ; Subract 90 from R6.
        mov.b		#0x01, &b_zero_o        ; Dirty bit for Ones place to determine whether a blank or zero is necessary.
	jmp		test_ones

eighty

	mov.b		#0x38, &b_tens		; Move a 8 into the tens place.
	sub.b		#0x50, R6               ; Subtract 80 from R6.
        mov.b		#0x01, &b_zero_o        ; Dirty bit for Ones place to determine whether a blank or zero is necessary.
	jmp		test_ones

seventy

	mov.b		#0x37, &b_tens		; Move a 7 into the tens place.
	sub.b		#0x46, R6               ; Subtract 70 from R6.
        mov.b		#0x01, &b_zero_o        ; Dirty bit for Ones place to determine whether a blank or zero is necessary.
	jmp		test_ones

sixty

	mov.b		#0x36, &b_tens		; Move a 6 into the tens place.
	sub.b		#0x3C, R6               ; Subtract 60 from R6.
        mov.b		#0x01, &b_zero_o        ; Dirty bit for Ones place to determine whether a blank or zero is necessary.
	jmp		test_ones

fifty

	mov.b		#0x35, &b_tens		; Move a 5 into the tens place.
	sub.b		#0x32, R6               ; Subtract 50 from R6.
        mov.b		#0x01, &b_zero_o        ; Dirty bit for Ones place to determine whether a blank or zero is necessary.
	jmp		test_ones

forty

	mov.b		#0x34, &b_tens		; Move a 4 into the tens place.
	sub.b		#0x28, R6               ; Subtract 40 from R6.
        mov.b		#0x01, &b_zero_o        ;Dirty bit for Ones place to determine whether a blank or zero is necessary.
	jmp		test_ones

thirty

	mov.b		#0x33, &b_tens		; Move a 3 into the tens place.
	sub.b		#0x1E, R6               ; Subtract 30 from R6.
        mov.b		#0x01, &b_zero_o        ; Dirty bit for Ones place to determine whether a blank or zero is necessary.
	jmp		test_ones

twenty

	mov.b		#0x32, &b_tens		; Move a 2 into the tens place.
	sub.b		#0x14, R6               ; Subtract 20 from R6.
        mov.b		#0x01, &b_zero_o        ; Dirty bit for Ones place to determine whether a blank or zero is necessary.
	jmp		test_ones

ten

	mov.b		#0x31, &b_tens		; Move a 1 into the tens place.
	sub.b		#0x0A, R6               ; Subtract 10 from R6.
        mov.b		#0x01, &b_zero_o        ; Dirty bit for Ones place to determine whether a blank or zero is necessary.
	jmp		test_ones

zero_tens
        cmp.b           #0x01, &b_zero_t        ; Is there a value in the hundreds place?
        jne             zero_tens_space         ; No, leave it blank.
	mov.b		#0x30, &b_tens		; Move a zero into the tens place.
	jmp		test_ones
	
zero_tens_space

	mov.b		#0x20, &b_tens		; Put a space in the tens spot.
	jmp		test_ones		

;---------------------------------------------------------------------------------
;Ones Place
;---------------------------------------------------------------------------------

nine

	mov.b		#0x39, &b_ones		; Move a 9 into the tens place.
	sub.b		#0x09, R6               ; Subtract 9 from R6
	jmp		add_comp

eight

	mov.b		#0x38, &b_ones		; Move a 8 into the tens place.
	sub.b		#0x08, R6               ; Subtract 8 from R6
	jmp		add_comp

seven

	mov.b		#0x37, &b_ones		; Move a 7 into the tens place.
	sub.b		#0x07, R6               ; Subtract 7 from R6
	jmp		add_comp

six

	mov.b		#0x36, &b_ones		; Move a 6 into the tens place.
	sub.b		#0x06, R6               ; Subtract 6 from R6
	jmp		add_comp

five

	mov.b		#0x35, &b_ones		; Move a 5 into the tens place.
	sub.b		#0x05, R6               ; Subtract 5 from R6
	jmp		add_comp

four

	mov.b		#0x34, &b_ones		; Move a 4 into the tens place.
	sub.b		#0x04, R6               ; Subtract 4 from R6
	jmp		add_comp

three

	mov.b		#0x33, &b_ones		; Move a 3 into the tens place.
	sub.b		#0x03, R6               ; Subtract 3 from R6
	jmp		add_comp

two

	mov.b		#0x32, &b_ones		; Move a 2 into the tens place.
	sub.b		#0x02, R6               ; Subtract 2 from R6
	jmp		add_comp

one

	mov.b		#0x31, &b_ones		; Move a 1 into the tens place.
	sub.b		#0x01, R6               ; Subtract 1 from R6
	jmp		add_comp

zero_ones

	mov.b		#0x30, &b_ones		; Move a 0 into the tens place.
	jmp		add_comp
        
;------------------------------------------------------------------------------
;Subroutines for Matt's CREATEMESSAGE code.
;------------------------------------------------------------------------------

print_hundreds
	
	mov.b	#0x01, R7	                ; sets as data call.
	add.b   &b_hundreds, R8                 ; Move that value into R8.
   ;     cmp.b   #0x01, &b_invalid_msg           ; Error Check.
    ;    jeq     Error                           ; Error. Jump to Error.
	;call	#CREATEMESSAGE                  ; Call Create Message Subroutine
	jmp	add_comp                        

print_tens

	mov.b	#0x01, R7	                ; sets as data.
	add.b	&b_tens, R8                     ; Dirty bit set. Move tens into R8.
   ;     cmp.b   #0x01, &b_invalid_msg           ; Error Check.
  ;      jeq     Error                           ; Error. Jump to Error.
	;call 	#CREATEMESSAGE                  ; Call Create Message Subroutine.
	jmp	add_comp

print_ones

	mov.b	#0x01, R7	                ; sets as data.
	add.b	&b_ones, R8                     ; move whatever the ones value is (0 or otherwise) into R8.
   ;     cmp.b   #0x01, &b_invalid_msg           ; Error Check.
 ;       jeq     Error                           ; Error. Jump to Error.
	;call	#CREATEMESSAGE                  ; Call Create Message Subroutine.

add_comp
        
        ret
END
