#include "msp430.h"                     ; #define controlled include file

;-------------------------------------------------------------------------------
; Program Defines
;-------------------------------------------------------------------------------
_byte           EQU 1                                                           ; Size of a byte is one RAM unit

;-------------------------------------------------------------------------------
            ORG     028Bh                                                       ; Global Variable (RAM) Definitions
;-------------------------------------------------------------------------------
b_invalid_msg   DS _byte                                                        ; Status of the CREATEMESSAGE


        NAME    CREATEMESSAGE                                                   ; module name
        EXTERN  WRITEBUF                                                        ; declare an externally (other file) defined subroutine
        EXTERN  b_write_status_flag                                             ; declare an externally (other file) defined variable

        PUBLIC  b_invalid_msg                                                   ; make the b_invalid_msg label visible outside this file
        PUBLIC  CREATEMESSAGE                                                   ; make the main label visible outside this file

        RSEG    CODE                                                            ; place program code in 'CODE' segment


;-------------------------------------------------------------------------------; Prepare and place message into Ring Buffer
CREATEMESSAGE                                                                   ; IN: R7, R8, b_write_status_flag
;-------------------------------------------------------------------------------; OUT: b_invalid_msg


          BIC.B   #BIT1, &P2OUT
      
          cmp.b   #BIT0, R7
          JEQ     msg_type_1
      
      
msg_type_0
          bic.b   #BIT0, &P2OUT                                                 ; Change P2.0 to the message type
          jmp     message_data                                                  ; Continue

msg_type_1
          bis.b   #BIT0, &P2OUT                                                 ; Change P2.0 to the message type
          jmp     message_data                                                  ; Continue   

message_data

          mov.b   R8, &UCB0TXBUF                                   ; Move the message to the transmit buffer

finish_sending_byte

          ;bit.b   #UCB0TXIFG, &IFG2
          bit.b   #UCBUSY, &UCB0STAT
          JC     finish_sending_byte

          NOP
          BIS.B   #BIT1, &P2OUT
          ret

END