#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name
    
        EXTERN  INIT_HARDWARE           ; declare an externally (other file) defined subroutine
        EXTERN  READBUF
        EXTERN  SETUPSPI
        EXTERN  INITBUFVARS
        EXTERN  InitializeLCD        
        EXTERN  b_message_data
        EXTERN  b_message_type
        EXTERN  b_read_status_flag
        EXTERN  Clear
        EXTERN  SetAddress        
        EXTERN  PRINTSTRING                  
        EXTERN  BACKLIGHT_CONTROL
        PUBLIC  main                    ; make the main label visible outside this module



;-------------------------------------------------------------------------------
;           Interrupt Vectors
;-------------------------------------------------------------------------------
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label


        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack
        mov.b   &CALBC1_1MHZ, &BCSCTL1      ; Load calibrated DCO 1MHZ pt 1/2
        mov.b   &CALDCO_1MHZ, &DCOCTL       ; Load calibrated DCO 1MHZ pt 2/2
StopWDT mov.w   #WDTPW+WDTHOLD,&WDTCTL      ; Disable watchdog timer        
        
        call #INIT_HARDWARE
        call #SETUPSPI
        call #INITBUFVARS
        ;bis.w   #GIE, SR
        call #InitializeLCD
        ;call #Clear
        
        ;mov.w #100, R10
        ;call #BACKLIGHT_CONTROL
        
main:   NOP                              ; main program
               
        mov  #0h, R4
        mov  #0h, R5
        call #SetAddress    

        mov.w  #HELLO, R9
        call    #PRINTSTRING
     
        mov  #1h, R4
        mov  #0h, R5
        call #SetAddress    

        mov.w  #WORLD, R9
        call    #PRINTSTRING
        

        JMP main                           ; jump to current location '$'
                                        ; (endless loop)




HELLO       DB  "Hello"
WORLD       DB   "World"
                                            ;
            END